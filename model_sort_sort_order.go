/*
CDP Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package customer

import (
	"encoding/json"
	"fmt"
)

// SortSortOrder the model 'SortSortOrder'
type SortSortOrder string

// List of SortSortOrder
const (
	SORTSORTORDER_DESC SortSortOrder = "DESC"
	SORTSORTORDER_ASC  SortSortOrder = "ASC"
)

// All allowed values of SortSortOrder enum
var AllowedSortSortOrderEnumValues = []SortSortOrder{
	"DESC",
	"ASC",
}

func (v *SortSortOrder) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SortSortOrder(value)
	for _, existing := range AllowedSortSortOrderEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SortSortOrder", value)
}

// NewSortSortOrderFromValue returns a pointer to a valid SortSortOrder
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSortSortOrderFromValue(v string) (*SortSortOrder, error) {
	ev := SortSortOrder(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SortSortOrder: valid values are %v", v, AllowedSortSortOrderEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SortSortOrder) IsValid() bool {
	for _, existing := range AllowedSortSortOrderEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SortSortOrder value
func (v SortSortOrder) Ptr() *SortSortOrder {
	return &v
}

type NullableSortSortOrder struct {
	value *SortSortOrder
	isSet bool
}

func (v NullableSortSortOrder) Get() *SortSortOrder {
	return v.value
}

func (v *NullableSortSortOrder) Set(val *SortSortOrder) {
	v.value = val
	v.isSet = true
}

func (v NullableSortSortOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableSortSortOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSortSortOrder(val *SortSortOrder) *NullableSortSortOrder {
	return &NullableSortSortOrder{value: val, isSet: true}
}

func (v NullableSortSortOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSortSortOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
