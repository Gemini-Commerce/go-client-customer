/*
CDP Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package customer

import (
	"encoding/json"
)

// checks if the CustomerFindSubscriberByEmailRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomerFindSubscriberByEmailRequest{}

// CustomerFindSubscriberByEmailRequest struct for CustomerFindSubscriberByEmailRequest
type CustomerFindSubscriberByEmailRequest struct {
	TenantId *string `json:"tenantId,omitempty"`
	SubscriberEmail *string `json:"subscriberEmail,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CustomerFindSubscriberByEmailRequest CustomerFindSubscriberByEmailRequest

// NewCustomerFindSubscriberByEmailRequest instantiates a new CustomerFindSubscriberByEmailRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomerFindSubscriberByEmailRequest() *CustomerFindSubscriberByEmailRequest {
	this := CustomerFindSubscriberByEmailRequest{}
	return &this
}

// NewCustomerFindSubscriberByEmailRequestWithDefaults instantiates a new CustomerFindSubscriberByEmailRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomerFindSubscriberByEmailRequestWithDefaults() *CustomerFindSubscriberByEmailRequest {
	this := CustomerFindSubscriberByEmailRequest{}
	return &this
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *CustomerFindSubscriberByEmailRequest) GetTenantId() string {
	if o == nil || IsNil(o.TenantId) {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerFindSubscriberByEmailRequest) GetTenantIdOk() (*string, bool) {
	if o == nil || IsNil(o.TenantId) {
		return nil, false
	}
	return o.TenantId, true
}

// &#39;Has&#39;TenantId returns a boolean if a field has been set.
func (o *CustomerFindSubscriberByEmailRequest) &#39;Has&#39;TenantId() bool {
	if o != nil && !IsNil(o.TenantId) {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *CustomerFindSubscriberByEmailRequest) SetTenantId(v string) {
	o.TenantId = &v
}

// GetSubscriberEmail returns the SubscriberEmail field value if set, zero value otherwise.
func (o *CustomerFindSubscriberByEmailRequest) GetSubscriberEmail() string {
	if o == nil || IsNil(o.SubscriberEmail) {
		var ret string
		return ret
	}
	return *o.SubscriberEmail
}

// GetSubscriberEmailOk returns a tuple with the SubscriberEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerFindSubscriberByEmailRequest) GetSubscriberEmailOk() (*string, bool) {
	if o == nil || IsNil(o.SubscriberEmail) {
		return nil, false
	}
	return o.SubscriberEmail, true
}

// &#39;Has&#39;SubscriberEmail returns a boolean if a field has been set.
func (o *CustomerFindSubscriberByEmailRequest) &#39;Has&#39;SubscriberEmail() bool {
	if o != nil && !IsNil(o.SubscriberEmail) {
		return true
	}

	return false
}

// SetSubscriberEmail gets a reference to the given string and assigns it to the SubscriberEmail field.
func (o *CustomerFindSubscriberByEmailRequest) SetSubscriberEmail(v string) {
	o.SubscriberEmail = &v
}

func (o CustomerFindSubscriberByEmailRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomerFindSubscriberByEmailRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TenantId) {
		toSerialize["tenantId"] = o.TenantId
	}
	if !IsNil(o.SubscriberEmail) {
		toSerialize["subscriberEmail"] = o.SubscriberEmail
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CustomerFindSubscriberByEmailRequest) UnmarshalJSON(data []byte) (err error) {
	varCustomerFindSubscriberByEmailRequest := _CustomerFindSubscriberByEmailRequest{}

	err = json.Unmarshal(data, &varCustomerFindSubscriberByEmailRequest)

	if err != nil {
		return err
	}

	*o = CustomerFindSubscriberByEmailRequest(varCustomerFindSubscriberByEmailRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "tenantId")
		delete(additionalProperties, "subscriberEmail")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *CustomerFindSubscriberByEmailRequest) GetValue() interface{} {
	if o == nil || IsNil(o.Type) || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}
// SetValue populate the value of well-known types
func (o *CustomerFindSubscriberByEmailRequest) SetValue(value interface{}) {
	if o == nil || IsNil(o.Type) || IsNil(value) {
		return
	}
    if IsNil(o.AdditionalProperties) {
        o.AdditionalProperties = map[string]interface{}{}
    }
	o.AdditionalProperties["value"] = value
	return
}
type NullableCustomerFindSubscriberByEmailRequest struct {
	value *CustomerFindSubscriberByEmailRequest
	isSet bool
}

func (v NullableCustomerFindSubscriberByEmailRequest) Get() *CustomerFindSubscriberByEmailRequest {
	return v.value
}

func (v *NullableCustomerFindSubscriberByEmailRequest) Set(val *CustomerFindSubscriberByEmailRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomerFindSubscriberByEmailRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomerFindSubscriberByEmailRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomerFindSubscriberByEmailRequest(val *CustomerFindSubscriberByEmailRequest) *NullableCustomerFindSubscriberByEmailRequest {
	return &NullableCustomerFindSubscriberByEmailRequest{value: val, isSet: true}
}

func (v NullableCustomerFindSubscriberByEmailRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomerFindSubscriberByEmailRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


