/*
customer/customer.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CustomerFindManyRequestFilter struct for CustomerFindManyRequestFilter
type CustomerFindManyRequestFilter struct {
	Newsletter *bool `json:"newsletter,omitempty"`
}

// NewCustomerFindManyRequestFilter instantiates a new CustomerFindManyRequestFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomerFindManyRequestFilter() *CustomerFindManyRequestFilter {
	this := CustomerFindManyRequestFilter{}
	return &this
}

// NewCustomerFindManyRequestFilterWithDefaults instantiates a new CustomerFindManyRequestFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomerFindManyRequestFilterWithDefaults() *CustomerFindManyRequestFilter {
	this := CustomerFindManyRequestFilter{}
	return &this
}

// GetNewsletter returns the Newsletter field value if set, zero value otherwise.
func (o *CustomerFindManyRequestFilter) GetNewsletter() bool {
	if o == nil || isNil(o.Newsletter) {
		var ret bool
		return ret
	}
	return *o.Newsletter
}

// GetNewsletterOk returns a tuple with the Newsletter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerFindManyRequestFilter) GetNewsletterOk() (*bool, bool) {
	if o == nil || isNil(o.Newsletter) {
    return nil, false
	}
	return o.Newsletter, true
}

// HasNewsletter returns a boolean if a field has been set.
func (o *CustomerFindManyRequestFilter) HasNewsletter() bool {
	if o != nil && !isNil(o.Newsletter) {
		return true
	}

	return false
}

// SetNewsletter gets a reference to the given bool and assigns it to the Newsletter field.
func (o *CustomerFindManyRequestFilter) SetNewsletter(v bool) {
	o.Newsletter = &v
}

func (o CustomerFindManyRequestFilter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Newsletter) {
		toSerialize["newsletter"] = o.Newsletter
	}
	return json.Marshal(toSerialize)
}

type NullableCustomerFindManyRequestFilter struct {
	value *CustomerFindManyRequestFilter
	isSet bool
}

func (v NullableCustomerFindManyRequestFilter) Get() *CustomerFindManyRequestFilter {
	return v.value
}

func (v *NullableCustomerFindManyRequestFilter) Set(val *CustomerFindManyRequestFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomerFindManyRequestFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomerFindManyRequestFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomerFindManyRequestFilter(val *CustomerFindManyRequestFilter) *NullableCustomerFindManyRequestFilter {
	return &NullableCustomerFindManyRequestFilter{value: val, isSet: true}
}

func (v NullableCustomerFindManyRequestFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomerFindManyRequestFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


