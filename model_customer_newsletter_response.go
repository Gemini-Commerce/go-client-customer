/*
CDP Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package customer

import (
	"encoding/json"
)

// CustomerNewsletterResponse struct for CustomerNewsletterResponse
type CustomerNewsletterResponse struct {
	Id *string `json:"id,omitempty"`
	NewsletterGrn *string `json:"newsletterGrn,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NewCustomerNewsletterResponse instantiates a new CustomerNewsletterResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomerNewsletterResponse() *CustomerNewsletterResponse {
	this := CustomerNewsletterResponse{}
	return &this
}

// NewCustomerNewsletterResponseWithDefaults instantiates a new CustomerNewsletterResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomerNewsletterResponseWithDefaults() *CustomerNewsletterResponse {
	this := CustomerNewsletterResponse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CustomerNewsletterResponse) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerNewsletterResponse) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CustomerNewsletterResponse) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CustomerNewsletterResponse) SetId(v string) {
	o.Id = &v
}

// GetNewsletterGrn returns the NewsletterGrn field value if set, zero value otherwise.
func (o *CustomerNewsletterResponse) GetNewsletterGrn() string {
	if o == nil || isNil(o.NewsletterGrn) {
		var ret string
		return ret
	}
	return *o.NewsletterGrn
}

// GetNewsletterGrnOk returns a tuple with the NewsletterGrn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerNewsletterResponse) GetNewsletterGrnOk() (*string, bool) {
	if o == nil || isNil(o.NewsletterGrn) {
    return nil, false
	}
	return o.NewsletterGrn, true
}

// HasNewsletterGrn returns a boolean if a field has been set.
func (o *CustomerNewsletterResponse) HasNewsletterGrn() bool {
	if o != nil && !isNil(o.NewsletterGrn) {
		return true
	}

	return false
}

// SetNewsletterGrn gets a reference to the given string and assigns it to the NewsletterGrn field.
func (o *CustomerNewsletterResponse) SetNewsletterGrn(v string) {
	o.NewsletterGrn = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CustomerNewsletterResponse) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerNewsletterResponse) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CustomerNewsletterResponse) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CustomerNewsletterResponse) SetName(v string) {
	o.Name = &v
}

func (o CustomerNewsletterResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.NewsletterGrn) {
		toSerialize["newsletterGrn"] = o.NewsletterGrn
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableCustomerNewsletterResponse struct {
	value *CustomerNewsletterResponse
	isSet bool
}

func (v NullableCustomerNewsletterResponse) Get() *CustomerNewsletterResponse {
	return v.value
}

func (v *NullableCustomerNewsletterResponse) Set(val *CustomerNewsletterResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomerNewsletterResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomerNewsletterResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomerNewsletterResponse(val *CustomerNewsletterResponse) *NullableCustomerNewsletterResponse {
	return &NullableCustomerNewsletterResponse{value: val, isSet: true}
}

func (v NullableCustomerNewsletterResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomerNewsletterResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


