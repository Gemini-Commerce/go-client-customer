/*
CDP Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package customer

import (
	"encoding/json"
	"fmt"
)

// CustomerConsentSource the model 'CustomerConsentSource'
type CustomerConsentSource string

// List of customerConsentSource
const (
	CUSTOMERCONSENTSOURCE_UNKNOWN    CustomerConsentSource = "CONSENT_SOURCE_UNKNOWN"
	CUSTOMERCONSENTSOURCE_FRONTEND   CustomerConsentSource = "CONSENT_SOURCE_FRONTEND"
	CUSTOMERCONSENTSOURCE_BACKOFFICE CustomerConsentSource = "CONSENT_SOURCE_BACKOFFICE"
	CUSTOMERCONSENTSOURCE_BACKEND    CustomerConsentSource = "CONSENT_SOURCE_BACKEND"
)

// All allowed values of CustomerConsentSource enum
var AllowedCustomerConsentSourceEnumValues = []CustomerConsentSource{
	"CONSENT_SOURCE_UNKNOWN",
	"CONSENT_SOURCE_FRONTEND",
	"CONSENT_SOURCE_BACKOFFICE",
	"CONSENT_SOURCE_BACKEND",
}

func (v *CustomerConsentSource) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CustomerConsentSource(value)
	for _, existing := range AllowedCustomerConsentSourceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CustomerConsentSource", value)
}

// NewCustomerConsentSourceFromValue returns a pointer to a valid CustomerConsentSource
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCustomerConsentSourceFromValue(v string) (*CustomerConsentSource, error) {
	ev := CustomerConsentSource(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CustomerConsentSource: valid values are %v", v, AllowedCustomerConsentSourceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CustomerConsentSource) IsValid() bool {
	for _, existing := range AllowedCustomerConsentSourceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to customerConsentSource value
func (v CustomerConsentSource) Ptr() *CustomerConsentSource {
	return &v
}

type NullableCustomerConsentSource struct {
	value *CustomerConsentSource
	isSet bool
}

func (v NullableCustomerConsentSource) Get() *CustomerConsentSource {
	return v.value
}

func (v *NullableCustomerConsentSource) Set(val *CustomerConsentSource) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomerConsentSource) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomerConsentSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomerConsentSource(val *CustomerConsentSource) *NullableCustomerConsentSource {
	return &NullableCustomerConsentSource{value: val, isSet: true}
}

func (v NullableCustomerConsentSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomerConsentSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
