/*
CDP Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CustomerUnsubscribeResponse struct for CustomerUnsubscribeResponse
type CustomerUnsubscribeResponse struct {
	Response *bool `json:"response,omitempty"`
	SubscriberExist *bool `json:"subscriberExist,omitempty"`
	ActiveNewsletterGrn []string `json:"activeNewsletterGrn,omitempty"`
}

// NewCustomerUnsubscribeResponse instantiates a new CustomerUnsubscribeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomerUnsubscribeResponse() *CustomerUnsubscribeResponse {
	this := CustomerUnsubscribeResponse{}
	return &this
}

// NewCustomerUnsubscribeResponseWithDefaults instantiates a new CustomerUnsubscribeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomerUnsubscribeResponseWithDefaults() *CustomerUnsubscribeResponse {
	this := CustomerUnsubscribeResponse{}
	return &this
}

// GetResponse returns the Response field value if set, zero value otherwise.
func (o *CustomerUnsubscribeResponse) GetResponse() bool {
	if o == nil || isNil(o.Response) {
		var ret bool
		return ret
	}
	return *o.Response
}

// GetResponseOk returns a tuple with the Response field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerUnsubscribeResponse) GetResponseOk() (*bool, bool) {
	if o == nil || isNil(o.Response) {
    return nil, false
	}
	return o.Response, true
}

// HasResponse returns a boolean if a field has been set.
func (o *CustomerUnsubscribeResponse) HasResponse() bool {
	if o != nil && !isNil(o.Response) {
		return true
	}

	return false
}

// SetResponse gets a reference to the given bool and assigns it to the Response field.
func (o *CustomerUnsubscribeResponse) SetResponse(v bool) {
	o.Response = &v
}

// GetSubscriberExist returns the SubscriberExist field value if set, zero value otherwise.
func (o *CustomerUnsubscribeResponse) GetSubscriberExist() bool {
	if o == nil || isNil(o.SubscriberExist) {
		var ret bool
		return ret
	}
	return *o.SubscriberExist
}

// GetSubscriberExistOk returns a tuple with the SubscriberExist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerUnsubscribeResponse) GetSubscriberExistOk() (*bool, bool) {
	if o == nil || isNil(o.SubscriberExist) {
    return nil, false
	}
	return o.SubscriberExist, true
}

// HasSubscriberExist returns a boolean if a field has been set.
func (o *CustomerUnsubscribeResponse) HasSubscriberExist() bool {
	if o != nil && !isNil(o.SubscriberExist) {
		return true
	}

	return false
}

// SetSubscriberExist gets a reference to the given bool and assigns it to the SubscriberExist field.
func (o *CustomerUnsubscribeResponse) SetSubscriberExist(v bool) {
	o.SubscriberExist = &v
}

// GetActiveNewsletterGrn returns the ActiveNewsletterGrn field value if set, zero value otherwise.
func (o *CustomerUnsubscribeResponse) GetActiveNewsletterGrn() []string {
	if o == nil || isNil(o.ActiveNewsletterGrn) {
		var ret []string
		return ret
	}
	return o.ActiveNewsletterGrn
}

// GetActiveNewsletterGrnOk returns a tuple with the ActiveNewsletterGrn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerUnsubscribeResponse) GetActiveNewsletterGrnOk() ([]string, bool) {
	if o == nil || isNil(o.ActiveNewsletterGrn) {
    return nil, false
	}
	return o.ActiveNewsletterGrn, true
}

// HasActiveNewsletterGrn returns a boolean if a field has been set.
func (o *CustomerUnsubscribeResponse) HasActiveNewsletterGrn() bool {
	if o != nil && !isNil(o.ActiveNewsletterGrn) {
		return true
	}

	return false
}

// SetActiveNewsletterGrn gets a reference to the given []string and assigns it to the ActiveNewsletterGrn field.
func (o *CustomerUnsubscribeResponse) SetActiveNewsletterGrn(v []string) {
	o.ActiveNewsletterGrn = v
}

func (o CustomerUnsubscribeResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Response) {
		toSerialize["response"] = o.Response
	}
	if !isNil(o.SubscriberExist) {
		toSerialize["subscriberExist"] = o.SubscriberExist
	}
	if !isNil(o.ActiveNewsletterGrn) {
		toSerialize["activeNewsletterGrn"] = o.ActiveNewsletterGrn
	}
	return json.Marshal(toSerialize)
}

type NullableCustomerUnsubscribeResponse struct {
	value *CustomerUnsubscribeResponse
	isSet bool
}

func (v NullableCustomerUnsubscribeResponse) Get() *CustomerUnsubscribeResponse {
	return v.value
}

func (v *NullableCustomerUnsubscribeResponse) Set(val *CustomerUnsubscribeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomerUnsubscribeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomerUnsubscribeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomerUnsubscribeResponse(val *CustomerUnsubscribeResponse) *NullableCustomerUnsubscribeResponse {
	return &NullableCustomerUnsubscribeResponse{value: val, isSet: true}
}

func (v NullableCustomerUnsubscribeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomerUnsubscribeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


