/*
customer/customer.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CustomerNewsletterRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomerNewsletterRequest{}

// CustomerNewsletterRequest struct for CustomerNewsletterRequest
type CustomerNewsletterRequest struct {
	NewsletterGrn *string `json:"newsletterGrn,omitempty"`
	Name *string `json:"name,omitempty"`
	Subscribed *bool `json:"subscribed,omitempty"`
}

// NewCustomerNewsletterRequest instantiates a new CustomerNewsletterRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomerNewsletterRequest() *CustomerNewsletterRequest {
	this := CustomerNewsletterRequest{}
	return &this
}

// NewCustomerNewsletterRequestWithDefaults instantiates a new CustomerNewsletterRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomerNewsletterRequestWithDefaults() *CustomerNewsletterRequest {
	this := CustomerNewsletterRequest{}
	return &this
}

// GetNewsletterGrn returns the NewsletterGrn field value if set, zero value otherwise.
func (o *CustomerNewsletterRequest) GetNewsletterGrn() string {
	if o == nil || IsNil(o.NewsletterGrn) {
		var ret string
		return ret
	}
	return *o.NewsletterGrn
}

// GetNewsletterGrnOk returns a tuple with the NewsletterGrn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerNewsletterRequest) GetNewsletterGrnOk() (*string, bool) {
	if o == nil || IsNil(o.NewsletterGrn) {
		return nil, false
	}
	return o.NewsletterGrn, true
}

// HasNewsletterGrn returns a boolean if a field has been set.
func (o *CustomerNewsletterRequest) HasNewsletterGrn() bool {
	if o != nil && !IsNil(o.NewsletterGrn) {
		return true
	}

	return false
}

// SetNewsletterGrn gets a reference to the given string and assigns it to the NewsletterGrn field.
func (o *CustomerNewsletterRequest) SetNewsletterGrn(v string) {
	o.NewsletterGrn = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CustomerNewsletterRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerNewsletterRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CustomerNewsletterRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CustomerNewsletterRequest) SetName(v string) {
	o.Name = &v
}

// GetSubscribed returns the Subscribed field value if set, zero value otherwise.
func (o *CustomerNewsletterRequest) GetSubscribed() bool {
	if o == nil || IsNil(o.Subscribed) {
		var ret bool
		return ret
	}
	return *o.Subscribed
}

// GetSubscribedOk returns a tuple with the Subscribed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerNewsletterRequest) GetSubscribedOk() (*bool, bool) {
	if o == nil || IsNil(o.Subscribed) {
		return nil, false
	}
	return o.Subscribed, true
}

// HasSubscribed returns a boolean if a field has been set.
func (o *CustomerNewsletterRequest) HasSubscribed() bool {
	if o != nil && !IsNil(o.Subscribed) {
		return true
	}

	return false
}

// SetSubscribed gets a reference to the given bool and assigns it to the Subscribed field.
func (o *CustomerNewsletterRequest) SetSubscribed(v bool) {
	o.Subscribed = &v
}

func (o CustomerNewsletterRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomerNewsletterRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NewsletterGrn) {
		toSerialize["newsletterGrn"] = o.NewsletterGrn
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Subscribed) {
		toSerialize["subscribed"] = o.Subscribed
	}
	return toSerialize, nil
}

type NullableCustomerNewsletterRequest struct {
	value *CustomerNewsletterRequest
	isSet bool
}

func (v NullableCustomerNewsletterRequest) Get() *CustomerNewsletterRequest {
	return v.value
}

func (v *NullableCustomerNewsletterRequest) Set(val *CustomerNewsletterRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomerNewsletterRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomerNewsletterRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomerNewsletterRequest(val *CustomerNewsletterRequest) *NullableCustomerNewsletterRequest {
	return &NullableCustomerNewsletterRequest{value: val, isSet: true}
}

func (v NullableCustomerNewsletterRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomerNewsletterRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


